<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function cfilename="uninit_pointer.c" gvid="1178" name="uninit_pointer_005_func_001" num-ppo="0">
   <statistics api-assumptions="9" callers="1" ds-assumptions="0" field-assignments="0" global-assignments="0" global-assumptions="0" rv-assumptions="0"/>
   <parameters>
    <param formal-vid="4601" index="1" vname="pbuf"/>
   </parameters>
   <callers>
    <caller cfilename="uninit_pointer.c" fname="uninit_pointer_005" gvid="1177" updated="05/31/2016 16:55:52" updated-f="1464713752.81">
     <call-site byte="135902" file="uninit_pointer.c" line="94"/>
     <args>
      <arg/>
     </args>
     <calling-context>
      <node name="instr" num="0"/>
      <node name="stmt" num="13"/>
     </calling-context>
    </caller>
   </callers>
   <api-assumptions>
    <api-assumption nr="1">
     <predicate tag="not-null">
      <exp etag="lval" xstr="pbuf">
       <lval>
        <lhost>
         <var vid="4601" vname="pbuf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <dependent-primary-proof-obligations>
      <po id="62"/>
      <po id="71"/>
      <po id="80"/>
      <po id="89"/>
      <po id="100"/>
     </dependent-primary-proof-obligations>
     <dependent-secondary-proof-obligations/>
    </api-assumption>
    <api-assumption nr="2">
     <predicate tag="not-null">
      <exp etag="lval" xstr="*(((lval (pbuf) +i 1):((int*)*))">
       <lval>
        <lhost>
         <mem binop="indexpi" etag="binop" xstr="((pbuf +i 1):((int*)*)">
          <exp1 etag="lval" xstr="pbuf">
           <lval>
            <lhost>
             <var vid="4601" vname="pbuf"/>
            </lhost>
           </lval>
          </exp1>
          <exp2 etag="const" xstr="1">
           <constant ctag="cint64" ikind="iint" intValue="1"/>
          </exp2>
          <typ ttag="tptr">
           <typ ttag="tptr">
            <typ ikind="iint" ttag="tint"/>
           </typ>
          </typ>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <dependent-primary-proof-obligations>
      <po id="108"/>
     </dependent-primary-proof-obligations>
     <dependent-secondary-proof-obligations/>
    </api-assumption>
    <api-assumption nr="3">
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ttag="tptr">
       <typ ikind="iint" ttag="tint"/>
      </typ>
      <exp1 etag="lval" xstr="pbuf">
       <lval>
        <lhost>
         <var vid="4601" vname="pbuf"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <dependent-primary-proof-obligations>
      <po id="103"/>
     </dependent-primary-proof-obligations>
     <dependent-secondary-proof-obligations/>
    </api-assumption>
    <api-assumption nr="4">
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="iint" ttag="tint"/>
      <exp1 etag="lval" xstr="*(((lval (pbuf) +i 1):((int*)*))">
       <lval>
        <lhost>
         <mem binop="indexpi" etag="binop" xstr="((pbuf +i 1):((int*)*)">
          <exp1 etag="lval" xstr="pbuf">
           <lval>
            <lhost>
             <var vid="4601" vname="pbuf"/>
            </lhost>
           </lval>
          </exp1>
          <exp2 etag="const" xstr="1">
           <constant ctag="cint64" ikind="iint" intValue="1"/>
          </exp2>
          <typ ttag="tptr">
           <typ ttag="tptr">
            <typ ikind="iint" ttag="tint"/>
           </typ>
          </typ>
         </mem>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <dependent-primary-proof-obligations>
      <po id="111"/>
     </dependent-primary-proof-obligations>
     <dependent-secondary-proof-obligations/>
    </api-assumption>
    <api-assumption nr="5">
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ttag="tptr">
       <typ ikind="iint" ttag="tint"/>
      </typ>
      <exp1 etag="lval" xstr="pbuf">
       <lval>
        <lhost>
         <var vid="4601" vname="pbuf"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <dependent-primary-proof-obligations>
      <po id="74"/>
     </dependent-primary-proof-obligations>
     <dependent-secondary-proof-obligations/>
    </api-assumption>
    <api-assumption nr="6">
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((*(((lval (pbuf) +i 1):((int*)*)) +i 1):(int*)">
         <exp1 etag="lval" xstr="*(((lval (pbuf) +i 1):((int*)*))">
          <lval>
           <lhost>
            <mem binop="indexpi" etag="binop" xstr="((pbuf +i 1):((int*)*)">
             <exp1 etag="lval" xstr="pbuf">
              <lval>
               <lhost>
                <var vid="4601" vname="pbuf"/>
               </lhost>
              </lval>
             </exp1>
             <exp2 etag="const" xstr="1">
              <constant ctag="cint64" ikind="iint" intValue="1"/>
             </exp2>
             <typ ttag="tptr">
              <typ ttag="tptr">
               <typ ikind="iint" ttag="tint"/>
              </typ>
             </typ>
            </mem>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="iint" ttag="tint"/>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <dependent-primary-proof-obligations>
      <po id="97"/>
     </dependent-primary-proof-obligations>
     <dependent-secondary-proof-obligations/>
    </api-assumption>
    <api-assumption nr="7">
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ttag="tptr">
       <typ ikind="iint" ttag="tint"/>
      </typ>
      <exp1 etag="lval" xstr="pbuf">
       <lval>
        <lhost>
         <var vid="4601" vname="pbuf"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="4">
       <constant ctag="cint64" ikind="iint" intValue="4"/>
      </exp2>
     </predicate>
     <dependent-primary-proof-obligations>
      <po id="92"/>
     </dependent-primary-proof-obligations>
     <dependent-secondary-proof-obligations/>
    </api-assumption>
    <api-assumption nr="8">
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((pbuf +i 1):((int*)*)">
         <exp1 etag="lval" xstr="pbuf">
          <lval>
           <lhost>
            <var vid="4601" vname="pbuf"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ttag="tptr">
          <typ ttag="tptr">
           <typ ikind="iint" ttag="tint"/>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <dependent-primary-proof-obligations>
      <po id="98"/>
     </dependent-primary-proof-obligations>
     <dependent-secondary-proof-obligations/>
    </api-assumption>
    <api-assumption nr="9">
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ttag="tptr">
       <typ ikind="iint" ttag="tint"/>
      </typ>
      <exp1 etag="lval" xstr="pbuf">
       <lval>
        <lhost>
         <var vid="4601" vname="pbuf"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp2>
     </predicate>
     <dependent-primary-proof-obligations>
      <po id="83"/>
     </dependent-primary-proof-obligations>
     <dependent-secondary-proof-obligations/>
    </api-assumption>
   </api-assumptions>
   <rv-assumptions/>
   <ds-assumptions/>
   <global-assumptions/>
   <global-assignments/>
   <field-assignments/>
  </function>
  <header time="05/31/2016 17:16:53">
   <application file="uninit_pointer.c" name="application"/>
  </header>
 </c-analysis>
