<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="zipSaveInteger">
   <statistics avg-context-complexity="3.33" avg-predicate-complexity="0.57" context-complexity="310" predicate-complexity="53" size="93"/>
   <unconstrained-external-functions>
    <efn name="unistd/_exit" num="1"/>
    <efn name="string/memcpy" num="4"/>
    <efn name="redisassert/_redisAssert" num="1"/>
   </unconstrained-external-functions>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="1">
     <location byte="49162" file="src/ziplist.c" line="349"/>
     <predicate from="iuchar" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="encoding">
       <lval>
        <lhost>
         <var vid="1485" vname="encoding"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="2" origin="prim-exp" p-complexity="0">
     <location byte="49162" file="src/ziplist.c" line="349"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1485" vname="encoding"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="3" origin="prim-exp" p-complexity="1">
     <location byte="49195" file="src/ziplist.c" line="350"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="iuchar" ttag="tint"/>
      <tto ikind="ischar" ttag="tint"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="1483" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="106"/>
       <node name="if-then"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="4" origin="prim-exp" p-complexity="0">
     <location byte="49195" file="src/ziplist.c" line="350"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1483" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="106"/>
       <node name="if-then"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="5" origin="prim-op" p-complexity="1">
     <location byte="49195" file="src/ziplist.c" line="350"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (p:(int8_t*))">
       <typ ttag="tptr">
        <typ tname="int8_t" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="106"/>
       <node name="if-then"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="6" origin="prim-op" p-complexity="1">
     <location byte="49195" file="src/ziplist.c" line="350"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(int8_t*))">
       <typ ttag="tptr">
        <typ tname="int8_t" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="106"/>
       <node name="if-then"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="7" origin="prim-op" p-complexity="2">
     <location byte="49195" file="src/ziplist.c" line="350"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="ischar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (p:(int8_t*))">
       <typ ttag="tptr">
        <typ tname="int8_t" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="106"/>
       <node name="if-then"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="8" origin="prim-op" p-complexity="1">
     <location byte="49195" file="src/ziplist.c" line="350"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="ischar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (p:(int8_t*))">
       <typ ttag="tptr">
        <typ tname="int8_t" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="106"/>
       <node name="if-then"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="9" origin="prim-lval" p-complexity="2">
     <location byte="49195" file="src/ziplist.c" line="350"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (p:(int8_t*)) +i 0):(int8_t*)">
       <exp1 etag="caste" xstr="caste (p:(int8_t*))">
        <typ ttag="tptr">
         <typ tname="int8_t" ttag="tnamed"/>
        </typ>
        <exp etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="1483" vname="p"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="int8_t" ttag="tnamed"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="106"/>
       <node name="if-then"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="10" origin="prim-lval" p-complexity="2">
     <location byte="49195" file="src/ziplist.c" line="350"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (p:(int8_t*)) +i 0):(int8_t*)">
       <exp1 etag="caste" xstr="caste (p:(int8_t*))">
        <typ ttag="tptr">
         <typ tname="int8_t" ttag="tnamed"/>
        </typ>
        <exp etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="1483" vname="p"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="int8_t" ttag="tnamed"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="106"/>
       <node name="if-then"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="11" origin="prim-lval" p-complexity="2">
     <location byte="49195" file="src/ziplist.c" line="350"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (p:(int8_t*)) +i 0):(int8_t*)">
       <exp1 etag="caste" xstr="caste (p:(int8_t*))">
        <typ ttag="tptr">
         <typ tname="int8_t" ttag="tnamed"/>
        </typ>
        <exp etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="1483" vname="p"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="int8_t" ttag="tnamed"/>
       </typ>
      </exp>
      <typ ikind="ischar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="106"/>
       <node name="if-then"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="12" origin="prim-lval" p-complexity="2">
     <location byte="49195" file="src/ziplist.c" line="350"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (p:(int8_t*)) +i 0):(int8_t*)">
       <exp1 etag="caste" xstr="caste (p:(int8_t*))">
        <typ ttag="tptr">
         <typ tname="int8_t" ttag="tnamed"/>
        </typ>
        <exp etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="1483" vname="p"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="int8_t" ttag="tnamed"/>
       </typ>
      </exp>
      <typ ikind="ischar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="106"/>
       <node name="if-then"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="13" origin="prim-exp" p-complexity="1">
     <location byte="49195" file="src/ziplist.c" line="350"/>
     <predicate tag="cast">
      <tfrom ikind="ilong" ttag="tint"/>
      <tto ikind="ischar" ttag="tint"/>
      <exp etag="lval" xstr="value">
       <lval>
        <lhost>
         <var vid="1484" vname="value"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="106"/>
       <node name="if-then"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="14" origin="prim-exp" p-complexity="0">
     <location byte="49195" file="src/ziplist.c" line="350"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1484" vname="value"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="106"/>
       <node name="if-then"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="15" origin="prim-exp" p-complexity="1">
     <location byte="49238" file="src/ziplist.c" line="351"/>
     <predicate from="iuchar" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="encoding">
       <lval>
        <lhost>
         <var vid="1485" vname="encoding"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="16" origin="prim-exp" p-complexity="0">
     <location byte="49238" file="src/ziplist.c" line="351"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1485" vname="encoding"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="17" origin="prim-exp" p-complexity="1">
     <location byte="49279" file="src/ziplist.c" line="352"/>
     <predicate tag="cast">
      <tfrom ikind="ilong" ttag="tint"/>
      <tto ikind="ishort" ttag="tint"/>
      <exp etag="lval" xstr="value">
       <lval>
        <lhost>
         <var vid="1484" vname="value"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="108"/>
       <node name="if-then"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="18" origin="prim-exp" p-complexity="0">
     <location byte="49279" file="src/ziplist.c" line="352"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1484" vname="value"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="108"/>
       <node name="if-then"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="19" origin="prim-exp" p-complexity="1">
     <location byte="49300" file="src/ziplist.c" line="353"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="iuchar" ttag="tint"/>
      <tto ttag="tvoid"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="1483" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="108"/>
       <node name="if-then"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="20" origin="prim-exp" p-complexity="0">
     <location byte="49300" file="src/ziplist.c" line="353"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1483" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="108"/>
       <node name="if-then"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="21" origin="prim-exp" p-complexity="1">
     <location byte="49300" file="src/ziplist.c" line="353"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="108"/>
       <node name="if-then"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="22" origin="prim-exp" p-complexity="1">
     <location byte="49300" file="src/ziplist.c" line="353"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="108"/>
       <node name="if-then"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="23" origin="prim-exp" p-complexity="1">
     <location byte="49300" file="src/ziplist.c" line="353"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="108"/>
       <node name="if-then"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="24" origin="prim-exp" p-complexity="0">
     <location byte="49300" file="src/ziplist.c" line="353"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ishort" ttag="tint"/>
      <tto ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="addrof" xstr="addrof (i16)">
       <lval>
        <lhost>
         <var vid="1486" vname="i16"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="108"/>
       <node name="if-then"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="25" origin="prim-exp" p-complexity="0">
     <location byte="49300" file="src/ziplist.c" line="353"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (i16):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (i16)">
        <lval>
         <lhost>
          <var vid="1486" vname="i16"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="108"/>
       <node name="if-then"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="26" origin="prim-exp" p-complexity="0">
     <location byte="49300" file="src/ziplist.c" line="353"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (i16):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (i16)">
        <lval>
         <lhost>
          <var vid="1486" vname="i16"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="108"/>
       <node name="if-then"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="27" origin="prim-exp" p-complexity="0">
     <location byte="49300" file="src/ziplist.c" line="353"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (i16):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (i16)">
        <lval>
         <lhost>
          <var vid="1486" vname="i16"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="108"/>
       <node name="if-then"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="28" origin="prim-exp" p-complexity="1">
     <location byte="49349" file="src/ziplist.c" line="355"/>
     <predicate from="iuchar" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="encoding">
       <lval>
        <lhost>
         <var vid="1485" vname="encoding"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="29" origin="prim-exp" p-complexity="0">
     <location byte="49349" file="src/ziplist.c" line="355"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1485" vname="encoding"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="30" origin="prim-op" p-complexity="0">
     <location byte="49349" file="src/ziplist.c" line="355"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="4">
       <constant ctag="cint64" ikind="iint" intValue="4"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="31" origin="prim-op" p-complexity="1">
     <location byte="49349" file="src/ziplist.c" line="355"/>
     <predicate size="iint" tag="width-overflow">
      <exp etag="const" xstr="4">
       <constant ctag="cint64" ikind="iint" intValue="4"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="32" origin="prim-exp" p-complexity="2">
     <location byte="49390" file="src/ziplist.c" line="356"/>
     <predicate tag="cast">
      <tfrom ikind="ilong" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp binop="shiftlt" etag="binop" xstr="((value &lt;&lt; 8):int64_t">
       <exp1 etag="lval" xstr="value">
        <lval>
         <lhost>
          <var vid="1484" vname="value"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="8">
        <constant ctag="cint64" ikind="iint" intValue="8"/>
       </exp2>
       <typ tname="int64_t" ttag="tnamed"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="33" origin="prim-exp" p-complexity="0">
     <location byte="49390" file="src/ziplist.c" line="356"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1484" vname="value"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="34" origin="prim-op" p-complexity="0">
     <location byte="49390" file="src/ziplist.c" line="356"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="35" origin="prim-op" p-complexity="1">
     <location byte="49390" file="src/ziplist.c" line="356"/>
     <predicate size="ilong" tag="width-overflow">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="36" origin="prim-exp" p-complexity="1">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="iuchar" ttag="tint"/>
      <tto ttag="tvoid"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="1483" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="37" origin="prim-exp" p-complexity="0">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1483" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="38" origin="prim-exp" p-complexity="1">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="39" origin="prim-exp" p-complexity="1">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="40" origin="prim-exp" p-complexity="1">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="41" origin="prim-exp" p-complexity="1">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="iuchar" ttag="tint"/>
      <tto ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp binop="pluspi" etag="binop" xstr="((caste (addrof (i32):(uint8_t*)) +i 1):(uint8_t*)">
       <exp1 etag="caste" xstr="caste (addrof (i32):(uint8_t*))">
        <typ ttag="tptr">
         <typ tname="uint8_t" ttag="tnamed"/>
        </typ>
        <exp etag="addrof" xstr="addrof (i32)">
         <lval>
          <lhost>
           <var vid="1487" vname="i32"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint8_t" ttag="tnamed"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="42" origin="prim-exp" p-complexity="0">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="iuchar" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (i32)">
       <lval>
        <lhost>
         <var vid="1487" vname="i32"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="43" origin="prim-op" p-complexity="0">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (i32):(uint8_t*))">
       <typ ttag="tptr">
        <typ tname="uint8_t" ttag="tnamed"/>
       </typ>
       <exp etag="addrof" xstr="addrof (i32)">
        <lval>
         <lhost>
          <var vid="1487" vname="i32"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="44" origin="prim-op" p-complexity="0">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (i32):(uint8_t*))">
       <typ ttag="tptr">
        <typ tname="uint8_t" ttag="tnamed"/>
       </typ>
       <exp etag="addrof" xstr="addrof (i32)">
        <lval>
         <lhost>
          <var vid="1487" vname="i32"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="45" origin="prim-op" p-complexity="1">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="iuchar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (i32):(uint8_t*))">
       <typ ttag="tptr">
        <typ tname="uint8_t" ttag="tnamed"/>
       </typ>
       <exp etag="addrof" xstr="addrof (i32)">
        <lval>
         <lhost>
          <var vid="1487" vname="i32"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="46" origin="prim-op" p-complexity="0">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="iuchar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (i32):(uint8_t*))">
       <typ ttag="tptr">
        <typ tname="uint8_t" ttag="tnamed"/>
       </typ>
       <exp etag="addrof" xstr="addrof (i32)">
        <lval>
         <lhost>
          <var vid="1487" vname="i32"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="47" origin="prim-exp" p-complexity="1">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((caste (addrof (i32):(uint8_t*)) +i 1):(uint8_t*):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((caste (addrof (i32):(uint8_t*)) +i 1):(uint8_t*)">
        <exp1 etag="caste" xstr="caste (addrof (i32):(uint8_t*))">
         <typ ttag="tptr">
          <typ tname="uint8_t" ttag="tnamed"/>
         </typ>
         <exp etag="addrof" xstr="addrof (i32)">
          <lval>
           <lhost>
            <var vid="1487" vname="i32"/>
           </lhost>
          </lval>
         </exp>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ tname="uint8_t" ttag="tnamed"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="48" origin="prim-exp" p-complexity="1">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((caste (addrof (i32):(uint8_t*)) +i 1):(uint8_t*):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((caste (addrof (i32):(uint8_t*)) +i 1):(uint8_t*)">
        <exp1 etag="caste" xstr="caste (addrof (i32):(uint8_t*))">
         <typ ttag="tptr">
          <typ tname="uint8_t" ttag="tnamed"/>
         </typ>
         <exp etag="addrof" xstr="addrof (i32)">
          <lval>
           <lhost>
            <var vid="1487" vname="i32"/>
           </lhost>
          </lval>
         </exp>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ tname="uint8_t" ttag="tnamed"/>
        </typ>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="49" origin="prim-exp" p-complexity="1">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((caste (addrof (i32):(uint8_t*)) +i 1):(uint8_t*):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((caste (addrof (i32):(uint8_t*)) +i 1):(uint8_t*)">
        <exp1 etag="caste" xstr="caste (addrof (i32):(uint8_t*))">
         <typ ttag="tptr">
          <typ tname="uint8_t" ttag="tnamed"/>
         </typ>
         <exp etag="addrof" xstr="addrof (i32)">
          <lval>
           <lhost>
            <var vid="1487" vname="i32"/>
           </lhost>
          </lval>
         </exp>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ tname="uint8_t" ttag="tnamed"/>
        </typ>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="50" origin="prim-op" p-complexity="1">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate op="minusa" size="iulong" tag="int-underflow">
      <exp1 etag="sizeofe" xstr="sizeof(i32)">
       <exp etag="lval" xstr="i32">
        <lval>
         <lhost>
          <var vid="1487" vname="i32"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="sizeof" xstr="sizeof (uint8_t)">
       <typ tname="uint8_t" ttag="tnamed"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="51" origin="prim-op" p-complexity="1">
     <location byte="49424" file="src/ziplist.c" line="358"/>
     <predicate op="minusa" size="iulong" tag="int-overflow">
      <exp1 etag="sizeofe" xstr="sizeof(i32)">
       <exp etag="lval" xstr="i32">
        <lval>
         <lhost>
          <var vid="1487" vname="i32"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="sizeof" xstr="sizeof (uint8_t)">
       <typ tname="uint8_t" ttag="tnamed"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="110"/>
       <node name="if-then"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="52" origin="prim-exp" p-complexity="1">
     <location byte="49493" file="src/ziplist.c" line="359"/>
     <predicate from="iuchar" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="encoding">
       <lval>
        <lhost>
         <var vid="1485" vname="encoding"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="53" origin="prim-exp" p-complexity="0">
     <location byte="49493" file="src/ziplist.c" line="359"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1485" vname="encoding"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="54" origin="prim-op" p-complexity="0">
     <location byte="49493" file="src/ziplist.c" line="359"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="4">
       <constant ctag="cint64" ikind="iint" intValue="4"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="55" origin="prim-op" p-complexity="1">
     <location byte="49493" file="src/ziplist.c" line="359"/>
     <predicate size="iint" tag="width-overflow">
      <exp etag="const" xstr="4">
       <constant ctag="cint64" ikind="iint" intValue="4"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="56" origin="prim-exp" p-complexity="1">
     <location byte="49534" file="src/ziplist.c" line="360"/>
     <predicate tag="cast">
      <tfrom ikind="ilong" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp etag="lval" xstr="value">
       <lval>
        <lhost>
         <var vid="1484" vname="value"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="112"/>
       <node name="if-then"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="57" origin="prim-exp" p-complexity="0">
     <location byte="49534" file="src/ziplist.c" line="360"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1484" vname="value"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="112"/>
       <node name="if-then"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="58" origin="prim-exp" p-complexity="1">
     <location byte="49555" file="src/ziplist.c" line="361"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="iuchar" ttag="tint"/>
      <tto ttag="tvoid"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="1483" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="112"/>
       <node name="if-then"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="59" origin="prim-exp" p-complexity="0">
     <location byte="49555" file="src/ziplist.c" line="361"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1483" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="112"/>
       <node name="if-then"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="60" origin="prim-exp" p-complexity="1">
     <location byte="49555" file="src/ziplist.c" line="361"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="112"/>
       <node name="if-then"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="61" origin="prim-exp" p-complexity="1">
     <location byte="49555" file="src/ziplist.c" line="361"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="112"/>
       <node name="if-then"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="62" origin="prim-exp" p-complexity="1">
     <location byte="49555" file="src/ziplist.c" line="361"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="112"/>
       <node name="if-then"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="63" origin="prim-exp" p-complexity="0">
     <location byte="49555" file="src/ziplist.c" line="361"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="addrof" xstr="addrof (i32)">
       <lval>
        <lhost>
         <var vid="1487" vname="i32"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="112"/>
       <node name="if-then"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="64" origin="prim-exp" p-complexity="0">
     <location byte="49555" file="src/ziplist.c" line="361"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (i32):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (i32)">
        <lval>
         <lhost>
          <var vid="1487" vname="i32"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="112"/>
       <node name="if-then"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="65" origin="prim-exp" p-complexity="0">
     <location byte="49555" file="src/ziplist.c" line="361"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (i32):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (i32)">
        <lval>
         <lhost>
          <var vid="1487" vname="i32"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="112"/>
       <node name="if-then"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="66" origin="prim-exp" p-complexity="0">
     <location byte="49555" file="src/ziplist.c" line="361"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (i32):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (i32)">
        <lval>
         <lhost>
          <var vid="1487" vname="i32"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="112"/>
       <node name="if-then"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="67" origin="prim-exp" p-complexity="1">
     <location byte="49604" file="src/ziplist.c" line="363"/>
     <predicate from="iuchar" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="encoding">
       <lval>
        <lhost>
         <var vid="1485" vname="encoding"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="68" origin="prim-exp" p-complexity="0">
     <location byte="49604" file="src/ziplist.c" line="363"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1485" vname="encoding"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="69" origin="prim-op" p-complexity="0">
     <location byte="49604" file="src/ziplist.c" line="363"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="4">
       <constant ctag="cint64" ikind="iint" intValue="4"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="70" origin="prim-op" p-complexity="1">
     <location byte="49604" file="src/ziplist.c" line="363"/>
     <predicate size="iint" tag="width-overflow">
      <exp etag="const" xstr="4">
       <constant ctag="cint64" ikind="iint" intValue="4"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="71" origin="prim-exp" p-complexity="0">
     <location byte="49645" file="src/ziplist.c" line="364"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1484" vname="value"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="114"/>
       <node name="if-then"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="72" origin="prim-exp" p-complexity="1">
     <location byte="49666" file="src/ziplist.c" line="365"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="iuchar" ttag="tint"/>
      <tto ttag="tvoid"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="1483" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="114"/>
       <node name="if-then"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="73" origin="prim-exp" p-complexity="0">
     <location byte="49666" file="src/ziplist.c" line="365"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1483" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="114"/>
       <node name="if-then"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="74" origin="prim-exp" p-complexity="1">
     <location byte="49666" file="src/ziplist.c" line="365"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="114"/>
       <node name="if-then"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="75" origin="prim-exp" p-complexity="1">
     <location byte="49666" file="src/ziplist.c" line="365"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="114"/>
       <node name="if-then"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="76" origin="prim-exp" p-complexity="1">
     <location byte="49666" file="src/ziplist.c" line="365"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="1483" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="114"/>
       <node name="if-then"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="77" origin="prim-exp" p-complexity="0">
     <location byte="49666" file="src/ziplist.c" line="365"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ilong" ttag="tint"/>
      <tto ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="addrof" xstr="addrof (i64)">
       <lval>
        <lhost>
         <var vid="1488" vname="i64"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="114"/>
       <node name="if-then"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="78" origin="prim-exp" p-complexity="0">
     <location byte="49666" file="src/ziplist.c" line="365"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (i64):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (i64)">
        <lval>
         <lhost>
          <var vid="1488" vname="i64"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="114"/>
       <node name="if-then"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="79" origin="prim-exp" p-complexity="0">
     <location byte="49666" file="src/ziplist.c" line="365"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (i64):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (i64)">
        <lval>
         <lhost>
          <var vid="1488" vname="i64"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="114"/>
       <node name="if-then"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="80" origin="prim-exp" p-complexity="0">
     <location byte="49666" file="src/ziplist.c" line="365"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (i64):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (i64)">
        <lval>
         <lhost>
          <var vid="1488" vname="i64"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="114"/>
       <node name="if-then"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="81" origin="prim-exp" p-complexity="1">
     <location byte="49715" file="src/ziplist.c" line="367"/>
     <predicate from="iuchar" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="encoding">
       <lval>
        <lhost>
         <var vid="1485" vname="encoding"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="115"/>
       <node name="if-else"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="82" origin="prim-exp" p-complexity="0">
     <location byte="49715" file="src/ziplist.c" line="367"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1485" vname="encoding"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="115"/>
       <node name="if-else"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="83" origin="prim-exp" p-complexity="1">
     <location byte="49715" file="src/ziplist.c" line="367"/>
     <predicate from="iuchar" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="encoding">
       <lval>
        <lhost>
         <var vid="1485" vname="encoding"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="116"/>
       <node name="if-then"/>
       <node name="stmt" num="115"/>
       <node name="if-else"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="84" origin="prim-exp" p-complexity="0">
     <location byte="49715" file="src/ziplist.c" line="367"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="1485" vname="encoding"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="116"/>
       <node name="if-then"/>
       <node name="stmt" num="115"/>
       <node name="if-else"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="85" origin="prim-exp" p-complexity="0">
     <location byte="49784" file="src/ziplist.c" line="370"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="115"/>
       <node name="if-else"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="86" origin="prim-exp" p-complexity="0">
     <location byte="49784" file="src/ziplist.c" line="370"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="&quot;NULL&quot;">
       <constant ctag="cstr" strValue="NULL"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="119"/>
       <node name="if-else"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="115"/>
       <node name="if-else"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="87" origin="prim-exp" p-complexity="0">
     <location byte="49784" file="src/ziplist.c" line="370"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;NULL&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;NULL&quot;">
        <constant ctag="cstr" strValue="NULL"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="119"/>
       <node name="if-else"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="115"/>
       <node name="if-else"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="88" origin="prim-exp" p-complexity="0">
     <location byte="49784" file="src/ziplist.c" line="370"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;NULL&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;NULL&quot;">
        <constant ctag="cstr" strValue="NULL"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="119"/>
       <node name="if-else"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="115"/>
       <node name="if-else"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="89" origin="prim-exp" p-complexity="0">
     <location byte="49784" file="src/ziplist.c" line="370"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;NULL&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;NULL&quot;">
        <constant ctag="cstr" strValue="NULL"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="119"/>
       <node name="if-else"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="115"/>
       <node name="if-else"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="90" origin="prim-exp" p-complexity="0">
     <location byte="49784" file="src/ziplist.c" line="370"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="&quot;ziplist.c&quot;">
       <constant ctag="cstr" strValue="ziplist.c"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="119"/>
       <node name="if-else"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="115"/>
       <node name="if-else"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="91" origin="prim-exp" p-complexity="0">
     <location byte="49784" file="src/ziplist.c" line="370"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;ziplist.c&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;ziplist.c&quot;">
        <constant ctag="cstr" strValue="ziplist.c"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="119"/>
       <node name="if-else"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="115"/>
       <node name="if-else"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="92" origin="prim-exp" p-complexity="0">
     <location byte="49784" file="src/ziplist.c" line="370"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;ziplist.c&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;ziplist.c&quot;">
        <constant ctag="cstr" strValue="ziplist.c"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="119"/>
       <node name="if-else"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="115"/>
       <node name="if-else"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="93" origin="prim-exp" p-complexity="0">
     <location byte="49784" file="src/ziplist.c" line="370"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;ziplist.c&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;ziplist.c&quot;">
        <constant ctag="cstr" strValue="ziplist.c"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="119"/>
       <node name="if-else"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="115"/>
       <node name="if-else"/>
       <node name="stmt" num="113"/>
       <node name="if-else"/>
       <node name="stmt" num="111"/>
       <node name="if-else"/>
       <node name="stmt" num="109"/>
       <node name="if-else"/>
       <node name="stmt" num="107"/>
       <node name="if-else"/>
       <node name="stmt" num="105"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="05/24/2016 04:22:18">
   <application file="src/ziplist.xml" name="application"/>
  </header>
 </c-analysis>
