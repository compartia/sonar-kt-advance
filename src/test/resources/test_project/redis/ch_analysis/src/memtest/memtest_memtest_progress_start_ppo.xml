<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="memtest_progress_start">
   <statistics avg-context-complexity="1.16" avg-predicate-complexity="0.71" context-complexity="110" predicate-complexity="67" size="95"/>
   <unconstrained-external-functions/>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" fname="printf" id="1" name="format" origin="f-pre" p-complexity="0">
     <location byte="30609" file="src/memtest.c" line="63"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="2" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30609" file="src/memtest.c" line="63"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="3" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30609" file="src/memtest.c" line="63"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="4" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30609" file="src/memtest.c" line="63"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="5" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="30609" file="src/memtest.c" line="63"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;[H[2J&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;[H[2J&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;[H[2J&quot;">
         <constant ctag="cstr" strValue="[H[2J"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="6" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30609" file="src/memtest.c" line="63"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;[H[2J&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;[H[2J&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;[H[2J&quot;">
         <constant ctag="cstr" strValue="[H[2J"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="7" origin="prim-exp" p-complexity="0">
     <location byte="30609" file="src/memtest.c" line="63"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;[H[2J&quot;">
       <constant ctag="cstr" strValue="[H[2J"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="8" origin="prim-exp" p-complexity="0">
     <location byte="30609" file="src/memtest.c" line="63"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="9" origin="prim-exp" p-complexity="0">
     <location byte="30609" file="src/memtest.c" line="63"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="10" origin="prim-exp" p-complexity="0">
     <location byte="30609" file="src/memtest.c" line="63"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;[H[2J&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2J&quot;">
        <constant ctag="cstr" strValue="[H[2J"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="11" origin="prim-exp" p-complexity="0">
     <location byte="30639" file="src/memtest.c" line="65"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="946" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="3"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="12" origin="prim-exp" p-complexity="1">
     <location byte="30639" file="src/memtest.c" line="65"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="ws.ws_col">
       <lval>
        <lhost>
         <var vid="938" vname="ws"/>
        </lhost>
        <offset>
         <field ckey="14" fname="ws_col"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="3"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="13" origin="prim-exp" p-complexity="0">
     <location byte="30639" file="src/memtest.c" line="65"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="938" vname="ws"/>
       </lhost>
       <offset>
        <field ckey="14" fname="ws_col"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="3"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="14" origin="prim-exp" p-complexity="1">
     <location byte="30639" file="src/memtest.c" line="65"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="ws.ws_row">
       <lval>
        <lhost>
         <var vid="938" vname="ws"/>
        </lhost>
        <offset>
         <field ckey="14" fname="ws_row"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="3"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="15" origin="prim-exp" p-complexity="0">
     <location byte="30639" file="src/memtest.c" line="65"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="938" vname="ws"/>
       </lhost>
       <offset>
        <field ckey="14" fname="ws_row"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="3"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="16" origin="prim-op" p-complexity="2">
     <location byte="30639" file="src/memtest.c" line="65"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 etag="caste" xstr="caste (ws.ws_row:int)">
       <typ ikind="iint" ttag="tint"/>
       <exp etag="lval" xstr="ws.ws_row">
        <lval>
         <lhost>
          <var vid="938" vname="ws"/>
         </lhost>
         <offset>
          <field ckey="14" fname="ws_row"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="3"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="17" origin="prim-op" p-complexity="2">
     <location byte="30639" file="src/memtest.c" line="65"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 etag="caste" xstr="caste (ws.ws_row:int)">
       <typ ikind="iint" ttag="tint"/>
       <exp etag="lval" xstr="ws.ws_row">
        <lval>
         <lhost>
          <var vid="938" vname="ws"/>
         </lhost>
         <offset>
          <field ckey="14" fname="ws_row"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="3"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="18" origin="prim-op" p-complexity="6">
     <location byte="30639" file="src/memtest.c" line="65"/>
     <predicate op="mult" size="iint" tag="int-underflow">
      <exp1 etag="caste" xstr="caste (ws.ws_col:int)">
       <typ ikind="iint" ttag="tint"/>
       <exp etag="lval" xstr="ws.ws_col">
        <lval>
         <lhost>
          <var vid="938" vname="ws"/>
         </lhost>
         <offset>
          <field ckey="14" fname="ws_col"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 binop="minusa" etag="binop" xstr="((caste (ws.ws_row:int) - 2):int">
       <exp1 etag="caste" xstr="caste (ws.ws_row:int)">
        <typ ikind="iint" ttag="tint"/>
        <exp etag="lval" xstr="ws.ws_row">
         <lval>
          <lhost>
           <var vid="938" vname="ws"/>
          </lhost>
          <offset>
           <field ckey="14" fname="ws_row"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="3"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="19" origin="prim-op" p-complexity="6">
     <location byte="30639" file="src/memtest.c" line="65"/>
     <predicate op="mult" size="iint" tag="int-overflow">
      <exp1 etag="caste" xstr="caste (ws.ws_col:int)">
       <typ ikind="iint" ttag="tint"/>
       <exp etag="lval" xstr="ws.ws_col">
        <lval>
         <lhost>
          <var vid="938" vname="ws"/>
         </lhost>
         <offset>
          <field ckey="14" fname="ws_col"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 binop="minusa" etag="binop" xstr="((caste (ws.ws_row:int) - 2):int">
       <exp1 etag="caste" xstr="caste (ws.ws_row:int)">
        <typ ikind="iint" ttag="tint"/>
        <exp etag="lval" xstr="ws.ws_row">
         <lval>
          <lhost>
           <var vid="938" vname="ws"/>
          </lhost>
          <offset>
           <field ckey="14" fname="ws_row"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="3"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="printf" id="20" name="format" origin="f-pre" p-complexity="0">
     <location byte="30685" file="src/memtest.c" line="65"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="5"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="printf" id="21" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30685" file="src/memtest.c" line="65"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="5"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="printf" id="22" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30685" file="src/memtest.c" line="65"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="5"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="printf" id="23" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30685" file="src/memtest.c" line="65"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="5"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="printf" id="24" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="30685" file="src/memtest.c" line="65"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;.&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;.&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;.&quot;">
         <constant ctag="cstr" strValue="."/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="5"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="printf" id="25" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30685" file="src/memtest.c" line="65"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;.&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;.&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;.&quot;">
         <constant ctag="cstr" strValue="."/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="5"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="26" origin="prim-exp" p-complexity="0">
     <location byte="30685" file="src/memtest.c" line="65"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;.&quot;">
       <constant ctag="cstr" strValue="."/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="5"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="27" origin="prim-exp" p-complexity="0">
     <location byte="30685" file="src/memtest.c" line="65"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="5"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="28" origin="prim-exp" p-complexity="0">
     <location byte="30685" file="src/memtest.c" line="65"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="5"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="29" origin="prim-exp" p-complexity="0">
     <location byte="30685" file="src/memtest.c" line="65"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="5"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="30" origin="prim-exp" p-complexity="0">
     <location byte="30639" file="src/memtest.c" line="65"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="946" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="5"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="31" origin="prim-op" p-complexity="2">
     <location byte="30639" file="src/memtest.c" line="65"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="946" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="5"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="32" origin="prim-op" p-complexity="2">
     <location byte="30639" file="src/memtest.c" line="65"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="946" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="5"/>
       <node name="loop"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="33" name="format" origin="f-pre" p-complexity="0">
     <location byte="30702" file="src/memtest.c" line="66"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="34" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30702" file="src/memtest.c" line="66"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="35" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30702" file="src/memtest.c" line="66"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="36" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30702" file="src/memtest.c" line="66"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="37" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="30702" file="src/memtest.c" line="66"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
         <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="38" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30702" file="src/memtest.c" line="66"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
         <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="39" origin="prim-exp" p-complexity="0">
     <location byte="30702" file="src/memtest.c" line="66"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
       <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="40" origin="prim-exp" p-complexity="0">
     <location byte="30702" file="src/memtest.c" line="66"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="41" origin="prim-exp" p-complexity="0">
     <location byte="30702" file="src/memtest.c" line="66"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="42" origin="prim-exp" p-complexity="0">
     <location byte="30702" file="src/memtest.c" line="66"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;Please keep the test running several minutes per GB of memory. ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Please keep the test running several minutes per GB of memory. ;&quot;">
        <constant ctag="cstr" strValue="Please keep the test running several minutes per GB of memory. ;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="43" name="format" origin="f-pre" p-complexity="0">
     <location byte="30782" file="src/memtest.c" line="67"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="44" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30782" file="src/memtest.c" line="67"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="45" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30782" file="src/memtest.c" line="67"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="46" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30782" file="src/memtest.c" line="67"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="47" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="30782" file="src/memtest.c" line="67"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
         <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="48" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30782" file="src/memtest.c" line="67"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
         <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="49" origin="prim-exp" p-complexity="0">
     <location byte="30782" file="src/memtest.c" line="67"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
       <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="50" origin="prim-exp" p-complexity="0">
     <location byte="30782" file="src/memtest.c" line="67"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="51" origin="prim-exp" p-complexity="0">
     <location byte="30782" file="src/memtest.c" line="67"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="52" origin="prim-exp" p-complexity="0">
     <location byte="30782" file="src/memtest.c" line="67"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/&quot;">
        <constant ctag="cstr" strValue="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="53" name="format" origin="f-pre" p-complexity="0">
     <location byte="30876" file="src/memtest.c" line="68"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="54" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30876" file="src/memtest.c" line="68"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="55" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30876" file="src/memtest.c" line="68"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="56" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30876" file="src/memtest.c" line="68"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="57" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="30876" file="src/memtest.c" line="68"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;[H[2K&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;[H[2K&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;[H[2K&quot;">
         <constant ctag="cstr" strValue="[H[2K"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="58" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30876" file="src/memtest.c" line="68"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;[H[2K&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;[H[2K&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;[H[2K&quot;">
         <constant ctag="cstr" strValue="[H[2K"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="59" origin="prim-exp" p-complexity="0">
     <location byte="30876" file="src/memtest.c" line="68"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;[H[2K&quot;">
       <constant ctag="cstr" strValue="[H[2K"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="60" origin="prim-exp" p-complexity="0">
     <location byte="30876" file="src/memtest.c" line="68"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="61" origin="prim-exp" p-complexity="0">
     <location byte="30876" file="src/memtest.c" line="68"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="62" origin="prim-exp" p-complexity="0">
     <location byte="30876" file="src/memtest.c" line="68"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;[H[2K&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;[H[2K&quot;">
        <constant ctag="cstr" strValue="[H[2K"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="63" name="format" origin="f-pre" p-complexity="0">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="64" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="65" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="66" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="67" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%s [%d] ;&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
         <constant ctag="cstr" strValue="%s [%d] ;"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="printf" id="68" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%s [%d] ;&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
         <constant ctag="cstr" strValue="%s [%d] ;"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="69" origin="prim-exp" p-complexity="0">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
       <constant ctag="cstr" strValue="%s [%d] ;"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="70" origin="prim-exp" p-complexity="0">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="71" origin="prim-exp" p-complexity="0">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="72" origin="prim-exp" p-complexity="0">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%s [%d] ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s [%d] ;&quot;">
        <constant ctag="cstr" strValue="%s [%d] ;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="73" origin="prim-exp" p-complexity="0">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="944" vname="title"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="74" origin="prim-exp" p-complexity="1">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="title">
       <lval>
        <lhost>
         <var vid="944" vname="title"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="75" origin="prim-exp" p-complexity="1">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="title">
       <lval>
        <lhost>
         <var vid="944" vname="title"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="76" origin="prim-exp" p-complexity="1">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="title">
       <lval>
        <lhost>
         <var vid="944" vname="title"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="77" origin="prim-exp" p-complexity="0">
     <location byte="30905" file="src/memtest.c" line="69"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="945" vname="pass"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="78" origin="prim-exp" p-complexity="0">
     <location byte="30943" file="src/memtest.c" line="70"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="79" origin="prim-exp" p-complexity="6">
     <location byte="30969" file="src/memtest.c" line="71"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp binop="mult" etag="binop" xstr="((caste (ws.ws_col:int) * ((caste (ws.ws_row:int) - 3):int):int">
       <exp1 etag="caste" xstr="caste (ws.ws_col:int)">
        <typ ikind="iint" ttag="tint"/>
        <exp etag="lval" xstr="ws.ws_col">
         <lval>
          <lhost>
           <var vid="938" vname="ws"/>
          </lhost>
          <offset>
           <field ckey="14" fname="ws_col"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 binop="minusa" etag="binop" xstr="((caste (ws.ws_row:int) - 3):int">
        <exp1 etag="caste" xstr="caste (ws.ws_row:int)">
         <typ ikind="iint" ttag="tint"/>
         <exp etag="lval" xstr="ws.ws_row">
          <lval>
           <lhost>
            <var vid="938" vname="ws"/>
           </lhost>
           <offset>
            <field ckey="14" fname="ws_row"/>
           </offset>
          </lval>
         </exp>
        </exp1>
        <exp2 etag="const" xstr="3">
         <constant ctag="cint64" ikind="iint" intValue="3"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="80" origin="prim-exp" p-complexity="1">
     <location byte="30969" file="src/memtest.c" line="71"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="ws.ws_col">
       <lval>
        <lhost>
         <var vid="938" vname="ws"/>
        </lhost>
        <offset>
         <field ckey="14" fname="ws_col"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="81" origin="prim-exp" p-complexity="0">
     <location byte="30969" file="src/memtest.c" line="71"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="938" vname="ws"/>
       </lhost>
       <offset>
        <field ckey="14" fname="ws_col"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="82" origin="prim-exp" p-complexity="1">
     <location byte="30969" file="src/memtest.c" line="71"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="ws.ws_row">
       <lval>
        <lhost>
         <var vid="938" vname="ws"/>
        </lhost>
        <offset>
         <field ckey="14" fname="ws_row"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="83" origin="prim-exp" p-complexity="0">
     <location byte="30969" file="src/memtest.c" line="71"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="938" vname="ws"/>
       </lhost>
       <offset>
        <field ckey="14" fname="ws_row"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="84" origin="prim-op" p-complexity="2">
     <location byte="30969" file="src/memtest.c" line="71"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 etag="caste" xstr="caste (ws.ws_row:int)">
       <typ ikind="iint" ttag="tint"/>
       <exp etag="lval" xstr="ws.ws_row">
        <lval>
         <lhost>
          <var vid="938" vname="ws"/>
         </lhost>
         <offset>
          <field ckey="14" fname="ws_row"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="85" origin="prim-op" p-complexity="2">
     <location byte="30969" file="src/memtest.c" line="71"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 etag="caste" xstr="caste (ws.ws_row:int)">
       <typ ikind="iint" ttag="tint"/>
       <exp etag="lval" xstr="ws.ws_row">
        <lval>
         <lhost>
          <var vid="938" vname="ws"/>
         </lhost>
         <offset>
          <field ckey="14" fname="ws_row"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="86" origin="prim-op" p-complexity="6">
     <location byte="30969" file="src/memtest.c" line="71"/>
     <predicate op="mult" size="iint" tag="int-underflow">
      <exp1 etag="caste" xstr="caste (ws.ws_col:int)">
       <typ ikind="iint" ttag="tint"/>
       <exp etag="lval" xstr="ws.ws_col">
        <lval>
         <lhost>
          <var vid="938" vname="ws"/>
         </lhost>
         <offset>
          <field ckey="14" fname="ws_col"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 binop="minusa" etag="binop" xstr="((caste (ws.ws_row:int) - 3):int">
       <exp1 etag="caste" xstr="caste (ws.ws_row:int)">
        <typ ikind="iint" ttag="tint"/>
        <exp etag="lval" xstr="ws.ws_row">
         <lval>
          <lhost>
           <var vid="938" vname="ws"/>
          </lhost>
          <offset>
           <field ckey="14" fname="ws_row"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="87" origin="prim-op" p-complexity="6">
     <location byte="30969" file="src/memtest.c" line="71"/>
     <predicate op="mult" size="iint" tag="int-overflow">
      <exp1 etag="caste" xstr="caste (ws.ws_col:int)">
       <typ ikind="iint" ttag="tint"/>
       <exp etag="lval" xstr="ws.ws_col">
        <lval>
         <lhost>
          <var vid="938" vname="ws"/>
         </lhost>
         <offset>
          <field ckey="14" fname="ws_col"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 binop="minusa" etag="binop" xstr="((caste (ws.ws_row:int) - 3):int">
       <exp1 etag="caste" xstr="caste (ws.ws_row:int)">
        <typ ikind="iint" ttag="tint"/>
        <exp etag="lval" xstr="ws.ws_row">
         <lval>
          <lhost>
           <var vid="938" vname="ws"/>
          </lhost>
          <offset>
           <field ckey="14" fname="ws_row"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fflush" id="88" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="31014" file="src/memtest.c" line="72"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="1" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fflush" id="89" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="31014" file="src/memtest.c" line="72"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="5" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="1" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fflush" id="90" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="31014" file="src/memtest.c" line="72"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="5" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="1" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fflush" id="91" name="deref-read" origin="f-pre" p-complexity="6">
     <location byte="31014" file="src/memtest.c" line="72"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="stdout">
         <lval>
          <lhost>
           <var vid="457" vname="stdout"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="1" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="92" origin="prim-exp" p-complexity="0">
     <location byte="31014" file="src/memtest.c" line="72"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="457" vname="stdout"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="93" origin="prim-exp" p-complexity="1">
     <location byte="31014" file="src/memtest.c" line="72"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="94" origin="prim-exp" p-complexity="1">
     <location byte="31014" file="src/memtest.c" line="72"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="5" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="95" origin="prim-exp" p-complexity="1">
     <location byte="31014" file="src/memtest.c" line="72"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="5" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="6"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="05/24/2016 04:22:02">
   <application file="src/memtest.xml" name="application"/>
  </header>
 </c-analysis>
