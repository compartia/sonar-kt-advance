<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="memtest_progress_step">
   <statistics avg-context-complexity="2.38" avg-predicate-complexity="1.55" context-complexity="100" predicate-complexity="65" size="42"/>
   <unconstrained-external-functions/>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="9">
     <location byte="31166" file="src/memtest.c" line="80"/>
     <predicate tag="cast">
      <tfrom ikind="iulonglong" ttag="tint"/>
      <tto ikind="iulong" ttag="tint"/>
      <exp binop="div" etag="binop" xstr="((((caste (curr:unsigned long long) * caste (progress_full:unsigned long long)):unsigned long long / caste (size:unsigned long long)):unsigned long long">
       <exp1 binop="mult" etag="binop" xstr="((caste (curr:unsigned long long) * caste (progress_full:unsigned long long)):unsigned long long">
        <exp1 etag="caste" xstr="caste (curr:unsigned long long)">
         <typ ikind="iulonglong" ttag="tint"/>
         <exp etag="lval" xstr="curr">
          <lval>
           <lhost>
            <var vid="953" vname="curr"/>
           </lhost>
          </lval>
         </exp>
        </exp1>
        <exp2 etag="caste" xstr="caste (progress_full:unsigned long long)">
         <typ ikind="iulonglong" ttag="tint"/>
         <exp etag="lval" xstr="progress_full">
          <lval>
           <lhost>
            <var vid="940" vname="progress_full"/>
           </lhost>
          </lval>
         </exp>
        </exp2>
        <typ ikind="iulonglong" ttag="tint"/>
       </exp1>
       <exp2 etag="caste" xstr="caste (size:unsigned long long)">
        <typ ikind="iulonglong" ttag="tint"/>
        <exp etag="lval" xstr="size">
         <lval>
          <lhost>
           <var vid="954" vname="size"/>
          </lhost>
         </lval>
        </exp>
       </exp2>
       <typ ikind="iulonglong" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="2" origin="prim-exp" p-complexity="1">
     <location byte="31166" file="src/memtest.c" line="80"/>
     <predicate tag="cast">
      <tfrom ikind="iulong" ttag="tint"/>
      <tto ikind="iulonglong" ttag="tint"/>
      <exp etag="lval" xstr="curr">
       <lval>
        <lhost>
         <var vid="953" vname="curr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="3" origin="prim-exp" p-complexity="0">
     <location byte="31166" file="src/memtest.c" line="80"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="953" vname="curr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="4" origin="prim-exp" p-complexity="1">
     <location byte="31166" file="src/memtest.c" line="80"/>
     <predicate tag="cast">
      <tfrom ikind="iulong" ttag="tint"/>
      <tto ikind="iulonglong" ttag="tint"/>
      <exp etag="lval" xstr="progress_full">
       <lval>
        <lhost>
         <var vid="940" vname="progress_full"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="5" origin="prim-exp" p-complexity="0">
     <location byte="31166" file="src/memtest.c" line="80"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="940" vname="progress_full"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="6" origin="prim-op" p-complexity="5">
     <location byte="31166" file="src/memtest.c" line="80"/>
     <predicate op="mult" size="iulonglong" tag="int-underflow">
      <exp1 etag="caste" xstr="caste (curr:unsigned long long)">
       <typ ikind="iulonglong" ttag="tint"/>
       <exp etag="lval" xstr="curr">
        <lval>
         <lhost>
          <var vid="953" vname="curr"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (progress_full:unsigned long long)">
       <typ ikind="iulonglong" ttag="tint"/>
       <exp etag="lval" xstr="progress_full">
        <lval>
         <lhost>
          <var vid="940" vname="progress_full"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="7" origin="prim-op" p-complexity="5">
     <location byte="31166" file="src/memtest.c" line="80"/>
     <predicate op="mult" size="iulonglong" tag="int-overflow">
      <exp1 etag="caste" xstr="caste (curr:unsigned long long)">
       <typ ikind="iulonglong" ttag="tint"/>
       <exp etag="lval" xstr="curr">
        <lval>
         <lhost>
          <var vid="953" vname="curr"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (progress_full:unsigned long long)">
       <typ ikind="iulonglong" ttag="tint"/>
       <exp etag="lval" xstr="progress_full">
        <lval>
         <lhost>
          <var vid="940" vname="progress_full"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="8" origin="prim-exp" p-complexity="1">
     <location byte="31166" file="src/memtest.c" line="80"/>
     <predicate tag="cast">
      <tfrom ikind="iulong" ttag="tint"/>
      <tto ikind="iulonglong" ttag="tint"/>
      <exp etag="lval" xstr="size">
       <lval>
        <lhost>
         <var vid="954" vname="size"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="9" origin="prim-exp" p-complexity="0">
     <location byte="31166" file="src/memtest.c" line="80"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="954" vname="size"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="10" origin="prim-op" p-complexity="9">
     <location byte="31166" file="src/memtest.c" line="80"/>
     <predicate op="div" size="iulonglong" tag="int-underflow">
      <exp1 binop="mult" etag="binop" xstr="((caste (curr:unsigned long long) * caste (progress_full:unsigned long long)):unsigned long long">
       <exp1 etag="caste" xstr="caste (curr:unsigned long long)">
        <typ ikind="iulonglong" ttag="tint"/>
        <exp etag="lval" xstr="curr">
         <lval>
          <lhost>
           <var vid="953" vname="curr"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="caste" xstr="caste (progress_full:unsigned long long)">
        <typ ikind="iulonglong" ttag="tint"/>
        <exp etag="lval" xstr="progress_full">
         <lval>
          <lhost>
           <var vid="940" vname="progress_full"/>
          </lhost>
         </lval>
        </exp>
       </exp2>
       <typ ikind="iulonglong" ttag="tint"/>
      </exp1>
      <exp2 etag="caste" xstr="caste (size:unsigned long long)">
       <typ ikind="iulonglong" ttag="tint"/>
       <exp etag="lval" xstr="size">
        <lval>
         <lhost>
          <var vid="954" vname="size"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="11" origin="prim-op" p-complexity="9">
     <location byte="31166" file="src/memtest.c" line="80"/>
     <predicate op="div" size="iulonglong" tag="int-overflow">
      <exp1 binop="mult" etag="binop" xstr="((caste (curr:unsigned long long) * caste (progress_full:unsigned long long)):unsigned long long">
       <exp1 etag="caste" xstr="caste (curr:unsigned long long)">
        <typ ikind="iulonglong" ttag="tint"/>
        <exp etag="lval" xstr="curr">
         <lval>
          <lhost>
           <var vid="953" vname="curr"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="caste" xstr="caste (progress_full:unsigned long long)">
        <typ ikind="iulonglong" ttag="tint"/>
        <exp etag="lval" xstr="progress_full">
         <lval>
          <lhost>
           <var vid="940" vname="progress_full"/>
          </lhost>
         </lval>
        </exp>
       </exp2>
       <typ ikind="iulonglong" ttag="tint"/>
      </exp1>
      <exp2 etag="caste" xstr="caste (size:unsigned long long)">
       <typ ikind="iulonglong" ttag="tint"/>
       <exp etag="lval" xstr="size">
        <lval>
         <lhost>
          <var vid="954" vname="size"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="12" origin="prim-op" p-complexity="1">
     <location byte="31166" file="src/memtest.c" line="80"/>
     <predicate tag="not-zero">
      <exp etag="caste" xstr="caste (size:unsigned long long)">
       <typ ikind="iulonglong" ttag="tint"/>
       <exp etag="lval" xstr="size">
        <lval>
         <lhost>
          <var vid="954" vname="size"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="13" origin="prim-exp" p-complexity="0">
     <location byte="31236" file="src/memtest.c" line="82"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="14" origin="prim-exp" p-complexity="0">
     <location byte="31236" file="src/memtest.c" line="82"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="957" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="12"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="15" origin="prim-exp" p-complexity="0">
     <location byte="31236" file="src/memtest.c" line="82"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="956" vname="chars"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="12"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="16" origin="prim-exp" p-complexity="0">
     <location byte="31236" file="src/memtest.c" line="82"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="939" vname="progress_printed"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="12"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="17" origin="prim-op" p-complexity="3">
     <location byte="31236" file="src/memtest.c" line="82"/>
     <predicate op="minusa" size="iulong" tag="int-underflow">
      <exp1 etag="lval" xstr="chars">
       <lval>
        <lhost>
         <var vid="956" vname="chars"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="progress_printed">
       <lval>
        <lhost>
         <var vid="939" vname="progress_printed"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="12"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="18" origin="prim-op" p-complexity="3">
     <location byte="31236" file="src/memtest.c" line="82"/>
     <predicate op="minusa" size="iulong" tag="int-overflow">
      <exp1 etag="lval" xstr="chars">
       <lval>
        <lhost>
         <var vid="956" vname="chars"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="progress_printed">
       <lval>
        <lhost>
         <var vid="939" vname="progress_printed"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="12"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="printf" id="19" name="format" origin="f-pre" p-complexity="0">
     <location byte="31281" file="src/memtest.c" line="82"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="printf" id="20" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="31281" file="src/memtest.c" line="82"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="printf" id="21" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="31281" file="src/memtest.c" line="82"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="printf" id="22" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="31281" file="src/memtest.c" line="82"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="printf" id="23" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="31281" file="src/memtest.c" line="82"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%c&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%c&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%c&quot;">
         <constant ctag="cstr" strValue="%c"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="printf" id="24" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="31281" file="src/memtest.c" line="82"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%c&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%c&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%c&quot;">
         <constant ctag="cstr" strValue="%c"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="25" origin="prim-exp" p-complexity="0">
     <location byte="31281" file="src/memtest.c" line="82"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%c&quot;">
       <constant ctag="cstr" strValue="%c"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="26" origin="prim-exp" p-complexity="0">
     <location byte="31281" file="src/memtest.c" line="82"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="27" origin="prim-exp" p-complexity="0">
     <location byte="31281" file="src/memtest.c" line="82"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="28" origin="prim-exp" p-complexity="0">
     <location byte="31281" file="src/memtest.c" line="82"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%c&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%c&quot;">
        <constant ctag="cstr" strValue="%c"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="29" origin="prim-exp" p-complexity="1">
     <location byte="31281" file="src/memtest.c" line="82"/>
     <predicate tag="cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp etag="lval" xstr="c">
       <lval>
        <lhost>
         <var vid="955" vname="c"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="30" origin="prim-exp" p-complexity="0">
     <location byte="31281" file="src/memtest.c" line="82"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="955" vname="c"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="31" origin="prim-exp" p-complexity="0">
     <location byte="31236" file="src/memtest.c" line="82"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="957" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="32" origin="prim-op" p-complexity="2">
     <location byte="31236" file="src/memtest.c" line="82"/>
     <predicate op="plusa" size="iulong" tag="int-underflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="957" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iulong" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="33" origin="prim-op" p-complexity="2">
     <location byte="31236" file="src/memtest.c" line="82"/>
     <predicate op="plusa" size="iulong" tag="int-overflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="957" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iulong" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="14"/>
       <node name="loop"/>
       <node name="stmt" num="11"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="34" origin="prim-exp" p-complexity="0">
     <location byte="31301" file="src/memtest.c" line="83"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="956" vname="chars"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="15"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fflush" id="35" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="31331" file="src/memtest.c" line="84"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="15"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="1" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fflush" id="36" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="31331" file="src/memtest.c" line="84"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="5" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="15"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="1" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fflush" id="37" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="31331" file="src/memtest.c" line="84"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="5" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="15"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="1" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fflush" id="38" name="deref-read" origin="f-pre" p-complexity="6">
     <location byte="31331" file="src/memtest.c" line="84"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="stdout">
         <lval>
          <lhost>
           <var vid="457" vname="stdout"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="15"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="1" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="39" origin="prim-exp" p-complexity="0">
     <location byte="31331" file="src/memtest.c" line="84"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="457" vname="stdout"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="15"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="40" origin="prim-exp" p-complexity="1">
     <location byte="31331" file="src/memtest.c" line="84"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="15"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="41" origin="prim-exp" p-complexity="1">
     <location byte="31331" file="src/memtest.c" line="84"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="5" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="15"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="42" origin="prim-exp" p-complexity="1">
     <location byte="31331" file="src/memtest.c" line="84"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="stdout">
       <lval>
        <lhost>
         <var vid="457" vname="stdout"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="5" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="15"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="05/24/2016 04:22:02">
   <application file="src/memtest.xml" name="application"/>
  </header>
 </c-analysis>
