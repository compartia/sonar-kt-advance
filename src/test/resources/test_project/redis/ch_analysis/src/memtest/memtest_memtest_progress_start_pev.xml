<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <log>
   <log-entry delta-checkvalid="75" delta-invariant="4" delta-lifted="14" time="05/24/2016 04:45:10"/>
  </log>
  <function name="memtest_progress_start">
   <statistics checkvalid="75" invariant="4" invariant_with_api="14" total="95" total-proven="93"/>
   <open-proof-obligations>
    <open id="32" line="65" predicate="int-overflow"/>
    <open id="74" line="69" predicate="valid-mem"/>
   </open-proof-obligations>
   <proof-obligations-discharged>
    <discharged id="1" method="check-valid" time="05/24/2016 04:45:10" type="format-string">
     <evidence comment="[H[2J is a string literal"/>
    </discharged>
    <discharged id="2" method="check-valid" time="05/24/2016 04:45:10" type="not-null">
     <evidence comment="string-literal"/>
    </discharged>
    <discharged id="3" method="check-valid" time="05/24/2016 04:45:10" type="null-terminated">
     <evidence comment="string literal"/>
    </discharged>
    <discharged id="4" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="5" method="check-valid" time="05/24/2016 04:45:10" type="ptr-upper-bound">
     <evidence comment="upperbound of constant string argument: [H[2J"/>
    </discharged>
    <discharged id="6" method="check-valid" time="05/24/2016 04:45:10" type="initialized-range">
     <evidence comment="constant string"/>
    </discharged>
    <discharged id="7" method="check-valid" time="05/24/2016 04:45:10" type="pointer-cast">
     <evidence comment="source and target type are the same"/>
    </discharged>
    <discharged id="8" method="check-valid" time="05/24/2016 04:45:10" type="valid-mem">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="9" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="10" method="check-valid" time="05/24/2016 04:45:10" type="upper-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged domain="symbolic sets" id="11" method="invariants" time="05/24/2016 04:45:10" type="initialized">
     <evidence comment="assignedAt#65"/>
    </discharged>
    <discharged domain="none" id="12" method="invariants" time="05/24/2016 04:45:10" type="unsigned-to-signed-cast">
     <evidence comment="predicate depends on global variables ws, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="3" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged id="13" method="check-valid" time="05/24/2016 04:45:10" type="initialized">
     <evidence comment="ws is global"/>
    </discharged>
    <discharged domain="none" id="14" method="invariants" time="05/24/2016 04:45:10" type="unsigned-to-signed-cast">
     <evidence comment="predicate depends on global variables ws, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="4" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged id="15" method="check-valid" time="05/24/2016 04:45:10" type="initialized">
     <evidence comment="ws is global"/>
    </discharged>
    <discharged domain="none" id="16" method="invariants" time="05/24/2016 04:45:10" type="int-underflow">
     <evidence comment="predicate depends on global variables ws, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="9" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged id="17" method="check-valid" time="05/24/2016 04:45:10" type="int-overflow">
     <evidence comment="subtract non-negative number:  value is 2"/>
    </discharged>
    <discharged domain="none" id="18" method="invariants" time="05/24/2016 04:45:10" type="int-underflow">
     <evidence comment="predicate depends on global variables ws, ws, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="1" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged domain="none" id="19" method="invariants" time="05/24/2016 04:45:10" type="int-overflow">
     <evidence comment="predicate depends on global variables ws, ws, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="2" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged id="20" method="check-valid" time="05/24/2016 04:45:10" type="format-string">
     <evidence comment=". is a string literal"/>
    </discharged>
    <discharged id="21" method="check-valid" time="05/24/2016 04:45:10" type="not-null">
     <evidence comment="string-literal"/>
    </discharged>
    <discharged id="22" method="check-valid" time="05/24/2016 04:45:10" type="null-terminated">
     <evidence comment="string literal"/>
    </discharged>
    <discharged id="23" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="24" method="check-valid" time="05/24/2016 04:45:10" type="ptr-upper-bound">
     <evidence comment="upperbound of constant string argument: ."/>
    </discharged>
    <discharged id="25" method="check-valid" time="05/24/2016 04:45:10" type="initialized-range">
     <evidence comment="constant string"/>
    </discharged>
    <discharged id="26" method="check-valid" time="05/24/2016 04:45:10" type="pointer-cast">
     <evidence comment="source and target type are the same"/>
    </discharged>
    <discharged id="27" method="check-valid" time="05/24/2016 04:45:10" type="valid-mem">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="28" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="29" method="check-valid" time="05/24/2016 04:45:10" type="upper-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged domain="symbolic sets" id="30" method="invariants" time="05/24/2016 04:45:10" type="initialized">
     <evidence comment="assignedAt#65"/>
    </discharged>
    <discharged id="31" method="check-valid" time="05/24/2016 04:45:10" type="int-underflow">
     <evidence comment="add non-negative number:  value is 1"/>
    </discharged>
    <discharged id="33" method="check-valid" time="05/24/2016 04:45:10" type="format-string">
     <evidence comment="Please keep the test running several minutes per GB of memory. ; is a string literal"/>
    </discharged>
    <discharged id="34" method="check-valid" time="05/24/2016 04:45:10" type="not-null">
     <evidence comment="string-literal"/>
    </discharged>
    <discharged id="35" method="check-valid" time="05/24/2016 04:45:10" type="null-terminated">
     <evidence comment="string literal"/>
    </discharged>
    <discharged id="36" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="37" method="check-valid" time="05/24/2016 04:45:10" type="ptr-upper-bound">
     <evidence comment="upperbound of constant string argument: Please keep the test running several minutes per GB of memory. ;"/>
    </discharged>
    <discharged id="38" method="check-valid" time="05/24/2016 04:45:10" type="initialized-range">
     <evidence comment="constant string"/>
    </discharged>
    <discharged id="39" method="check-valid" time="05/24/2016 04:45:10" type="pointer-cast">
     <evidence comment="source and target type are the same"/>
    </discharged>
    <discharged id="40" method="check-valid" time="05/24/2016 04:45:10" type="valid-mem">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="41" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="42" method="check-valid" time="05/24/2016 04:45:10" type="upper-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="43" method="check-valid" time="05/24/2016 04:45:10" type="format-string">
     <evidence comment="Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/ is a string literal"/>
    </discharged>
    <discharged id="44" method="check-valid" time="05/24/2016 04:45:10" type="not-null">
     <evidence comment="string-literal"/>
    </discharged>
    <discharged id="45" method="check-valid" time="05/24/2016 04:45:10" type="null-terminated">
     <evidence comment="string literal"/>
    </discharged>
    <discharged id="46" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="47" method="check-valid" time="05/24/2016 04:45:10" type="ptr-upper-bound">
     <evidence comment="upperbound of constant string argument: Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"/>
    </discharged>
    <discharged id="48" method="check-valid" time="05/24/2016 04:45:10" type="initialized-range">
     <evidence comment="constant string"/>
    </discharged>
    <discharged id="49" method="check-valid" time="05/24/2016 04:45:10" type="pointer-cast">
     <evidence comment="source and target type are the same"/>
    </discharged>
    <discharged id="50" method="check-valid" time="05/24/2016 04:45:10" type="valid-mem">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="51" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="52" method="check-valid" time="05/24/2016 04:45:10" type="upper-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="53" method="check-valid" time="05/24/2016 04:45:10" type="format-string">
     <evidence comment="[H[2K is a string literal"/>
    </discharged>
    <discharged id="54" method="check-valid" time="05/24/2016 04:45:10" type="not-null">
     <evidence comment="string-literal"/>
    </discharged>
    <discharged id="55" method="check-valid" time="05/24/2016 04:45:10" type="null-terminated">
     <evidence comment="string literal"/>
    </discharged>
    <discharged id="56" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="57" method="check-valid" time="05/24/2016 04:45:10" type="ptr-upper-bound">
     <evidence comment="upperbound of constant string argument: [H[2K"/>
    </discharged>
    <discharged id="58" method="check-valid" time="05/24/2016 04:45:10" type="initialized-range">
     <evidence comment="constant string"/>
    </discharged>
    <discharged id="59" method="check-valid" time="05/24/2016 04:45:10" type="pointer-cast">
     <evidence comment="source and target type are the same"/>
    </discharged>
    <discharged id="60" method="check-valid" time="05/24/2016 04:45:10" type="valid-mem">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="61" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="62" method="check-valid" time="05/24/2016 04:45:10" type="upper-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="63" method="check-valid" time="05/24/2016 04:45:10" type="format-string">
     <evidence comment="%s [%d] ; is a string literal"/>
    </discharged>
    <discharged id="64" method="check-valid" time="05/24/2016 04:45:10" type="not-null">
     <evidence comment="string-literal"/>
    </discharged>
    <discharged id="65" method="check-valid" time="05/24/2016 04:45:10" type="null-terminated">
     <evidence comment="string literal"/>
    </discharged>
    <discharged id="66" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="67" method="check-valid" time="05/24/2016 04:45:10" type="ptr-upper-bound">
     <evidence comment="upperbound of constant string argument: %s [%d] ;"/>
    </discharged>
    <discharged id="68" method="check-valid" time="05/24/2016 04:45:10" type="initialized-range">
     <evidence comment="constant string"/>
    </discharged>
    <discharged id="69" method="check-valid" time="05/24/2016 04:45:10" type="pointer-cast">
     <evidence comment="source and target type are the same"/>
    </discharged>
    <discharged id="70" method="check-valid" time="05/24/2016 04:45:10" type="valid-mem">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="71" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="72" method="check-valid" time="05/24/2016 04:45:10" type="upper-bound">
     <evidence comment="constant string is allocated by compiler"/>
    </discharged>
    <discharged id="73" method="check-valid" time="05/24/2016 04:45:10" type="initialized">
     <evidence comment="title is a function parameter"/>
    </discharged>
    <discharged domain="valuesets" id="75" method="invariants" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="non-negative offset from base value: title"/>
    </discharged>
    <discharged domain="valuesets" id="76" method="invariants" time="05/24/2016 04:45:10" type="upper-bound">
     <evidence comment="externally provided address; dereferencability is checked as part of precondition"/>
    </discharged>
    <discharged id="77" method="check-valid" time="05/24/2016 04:45:10" type="initialized">
     <evidence comment="pass is a function parameter"/>
    </discharged>
    <discharged id="78" method="check-valid" time="05/24/2016 04:45:10" type="signed-to-unsigned-cast">
     <evidence comment="constant value 0 fits in type unsigned long"/>
    </discharged>
    <discharged domain="none" id="79" method="invariants" time="05/24/2016 04:45:10" type="signed-to-unsigned-cast">
     <evidence comment="predicate depends on global variables ws, ws, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="5" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged domain="none" id="80" method="invariants" time="05/24/2016 04:45:10" type="unsigned-to-signed-cast">
     <evidence comment="predicate depends on global variables ws, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="3" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged id="81" method="check-valid" time="05/24/2016 04:45:10" type="initialized">
     <evidence comment="ws is global"/>
    </discharged>
    <discharged domain="none" id="82" method="invariants" time="05/24/2016 04:45:10" type="unsigned-to-signed-cast">
     <evidence comment="predicate depends on global variables ws, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="4" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged id="83" method="check-valid" time="05/24/2016 04:45:10" type="initialized">
     <evidence comment="ws is global"/>
    </discharged>
    <discharged domain="none" id="84" method="invariants" time="05/24/2016 04:45:10" type="int-underflow">
     <evidence comment="predicate depends on global variables ws, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="7" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged id="85" method="check-valid" time="05/24/2016 04:45:10" type="int-overflow">
     <evidence comment="subtract non-negative number:  value is 3"/>
    </discharged>
    <discharged domain="none" id="86" method="invariants" time="05/24/2016 04:45:10" type="int-underflow">
     <evidence comment="predicate depends on global variables ws, ws, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="12" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged domain="none" id="87" method="invariants" time="05/24/2016 04:45:10" type="int-overflow">
     <evidence comment="predicate depends on global variables ws, ws, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="6" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged domain="none" id="88" method="invariants" time="05/24/2016 04:45:10" type="not-null">
     <evidence comment="predicate depends on global variables stdout, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="11" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged id="89" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="global variable stdout is assigned a value with valid lower bound by inductive hypothesis (checked at assignment)"/>
    </discharged>
    <discharged id="90" method="check-valid" time="05/24/2016 04:45:10" type="upper-bound">
     <evidence comment="global variable stdout is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </discharged>
    <discharged domain="none" id="91" method="invariants" time="05/24/2016 04:45:10" type="initialized">
     <evidence comment="predicate depends on global variables stdout, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="8" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged id="92" method="check-valid" time="05/24/2016 04:45:10" type="initialized">
     <evidence comment="stdout is global"/>
    </discharged>
    <discharged domain="none" id="93" method="invariants" time="05/24/2016 04:45:10" type="valid-mem">
     <evidence comment="predicate depends on global variables stdout, which is delegated to global analysis"/>
     <assumptions>
      <uses a-id="10" a-type="global"/>
     </assumptions>
    </discharged>
    <discharged id="94" method="check-valid" time="05/24/2016 04:45:10" type="lower-bound">
     <evidence comment="global variable stdout is assigned a value with valid lower bound by inductive hypothesis (checked at assignment)"/>
    </discharged>
    <discharged id="95" method="check-valid" time="05/24/2016 04:45:10" type="upper-bound">
     <evidence comment="global variable stdout is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </discharged>
   </proof-obligations-discharged>
  </function>
  <header time="05/24/2016 04:45:10">
   <application file="src/memtest.c" name="application"/>
  </header>
 </c-analysis>
