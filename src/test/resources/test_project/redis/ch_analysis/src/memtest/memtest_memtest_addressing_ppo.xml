<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="memtest_addressing">
   <statistics avg-context-complexity="5.05" avg-predicate-complexity="0.87" context-complexity="389" predicate-complexity="67" size="77"/>
   <unconstrained-external-functions/>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="0">
     <location byte="31415" file="src/memtest.c" line="91"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="962" vname="bytes"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="17"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="2" origin="prim-op" p-complexity="2">
     <location byte="31415" file="src/memtest.c" line="91"/>
     <predicate op="div" size="iulong" tag="int-underflow">
      <exp1 etag="lval" xstr="bytes">
       <lval>
        <lhost>
         <var vid="962" vname="bytes"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="sizeof" xstr="sizeof (unsigned long)">
       <typ ikind="iulong" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="17"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="3" origin="prim-op" p-complexity="2">
     <location byte="31415" file="src/memtest.c" line="91"/>
     <predicate op="div" size="iulong" tag="int-overflow">
      <exp1 etag="lval" xstr="bytes">
       <lval>
        <lhost>
         <var vid="962" vname="bytes"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="sizeof" xstr="sizeof (unsigned long)">
       <typ ikind="iulong" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="17"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="4" origin="prim-op" p-complexity="0">
     <location byte="31415" file="src/memtest.c" line="91"/>
     <predicate tag="not-zero">
      <exp etag="sizeof" xstr="sizeof (unsigned long)">
       <typ ikind="iulong" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="17"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="5" origin="prim-exp" p-complexity="0">
     <location byte="31497" file="src/memtest.c" line="95"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="961" vname="l"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="17"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="6" origin="prim-exp" p-complexity="0">
     <location byte="31508" file="src/memtest.c" line="96"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="964" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="19"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="7" origin="prim-exp" p-complexity="0">
     <location byte="31508" file="src/memtest.c" line="96"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="963" vname="words"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="19"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="8" origin="prim-exp" p-complexity="0">
     <location byte="31546" file="src/memtest.c" line="97"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="965" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="21"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="9" origin="prim-lval" p-complexity="1">
     <location byte="31546" file="src/memtest.c" line="97"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="21"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="10" origin="prim-lval" p-complexity="1">
     <location byte="31546" file="src/memtest.c" line="97"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="21"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="11" origin="prim-lval" p-complexity="1">
     <location byte="31546" file="src/memtest.c" line="97"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iulong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="21"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="12" origin="prim-lval" p-complexity="1">
     <location byte="31546" file="src/memtest.c" line="97"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iulong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="21"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="13" origin="prim-exp" p-complexity="1">
     <location byte="31546" file="src/memtest.c" line="97"/>
     <predicate tag="cast">
      <tfrom ttag="tptr">
       <typ ikind="iulong" ttag="tint"/>
      </tfrom>
      <tto ikind="iulong" ttag="tint"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="21"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="14" origin="prim-exp" p-complexity="0">
     <location byte="31546" file="src/memtest.c" line="97"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="965" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="21"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="15" origin="prim-exp" p-complexity="0">
     <location byte="31577" file="src/memtest.c" line="98"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="965" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="21"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="16" origin="prim-op" p-complexity="1">
     <location byte="31577" file="src/memtest.c" line="98"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="21"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="17" origin="prim-op" p-complexity="1">
     <location byte="31577" file="src/memtest.c" line="98"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="21"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="18" origin="prim-op" p-complexity="2">
     <location byte="31577" file="src/memtest.c" line="98"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="iulong" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="21"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="19" origin="prim-op" p-complexity="1">
     <location byte="31577" file="src/memtest.c" line="98"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="iulong" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="21"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="20" origin="prim-exp" p-complexity="0">
     <location byte="31590" file="src/memtest.c" line="99"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="964" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="22"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="21" origin="prim-exp" p-complexity="0">
     <location byte="31613" file="src/memtest.c" line="99"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="964" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="23"/>
       <node name="if-then"/>
       <node name="stmt" num="22"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="22" origin="prim-exp" p-complexity="0">
     <location byte="31613" file="src/memtest.c" line="99"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="963" vname="words"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="23"/>
       <node name="if-then"/>
       <node name="stmt" num="22"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="23" origin="prim-op" p-complexity="2">
     <location byte="31613" file="src/memtest.c" line="99"/>
     <predicate op="mult" size="iulong" tag="int-underflow">
      <exp1 etag="lval" xstr="words">
       <lval>
        <lhost>
         <var vid="963" vname="words"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iulong" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="23"/>
       <node name="if-then"/>
       <node name="stmt" num="22"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="24" origin="prim-op" p-complexity="2">
     <location byte="31613" file="src/memtest.c" line="99"/>
     <predicate op="mult" size="iulong" tag="int-overflow">
      <exp1 etag="lval" xstr="words">
       <lval>
        <lhost>
         <var vid="963" vname="words"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iulong" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="23"/>
       <node name="if-then"/>
       <node name="stmt" num="22"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="25" origin="prim-exp" p-complexity="0">
     <location byte="31613" file="src/memtest.c" line="99"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="A">
       <constant charValue="65" ctag="cchr"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="23"/>
       <node name="if-then"/>
       <node name="stmt" num="22"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="26" origin="prim-exp" p-complexity="0">
     <location byte="31508" file="src/memtest.c" line="96"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="964" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="24"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="27" origin="prim-op" p-complexity="2">
     <location byte="31508" file="src/memtest.c" line="96"/>
     <predicate op="plusa" size="iulong" tag="int-underflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="964" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iulong" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="24"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="28" origin="prim-op" p-complexity="2">
     <location byte="31508" file="src/memtest.c" line="96"/>
     <predicate op="plusa" size="iulong" tag="int-overflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="964" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iulong" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="24"/>
       <node name="loop"/>
       <node name="stmt" num="18"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="29" origin="prim-exp" p-complexity="0">
     <location byte="31662" file="src/memtest.c" line="102"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="961" vname="l"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="25"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="30" origin="prim-exp" p-complexity="0">
     <location byte="31673" file="src/memtest.c" line="103"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="964" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="27"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="31" origin="prim-exp" p-complexity="0">
     <location byte="31673" file="src/memtest.c" line="103"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="963" vname="words"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="27"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="32" origin="prim-exp" p-complexity="6">
     <location byte="31711" file="src/memtest.c" line="104"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="965" vname="p"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="33" origin="prim-exp" p-complexity="0">
     <location byte="31711" file="src/memtest.c" line="104"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="965" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="34" origin="prim-lval" p-complexity="1">
     <location byte="31711" file="src/memtest.c" line="104"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="35" origin="prim-lval" p-complexity="1">
     <location byte="31711" file="src/memtest.c" line="104"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="36" origin="prim-lval" p-complexity="1">
     <location byte="31711" file="src/memtest.c" line="104"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iulong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="37" origin="prim-lval" p-complexity="1">
     <location byte="31711" file="src/memtest.c" line="104"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iulong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="38" origin="prim-exp" p-complexity="1">
     <location byte="31711" file="src/memtest.c" line="104"/>
     <predicate tag="cast">
      <tfrom ttag="tptr">
       <typ ikind="iulong" ttag="tint"/>
      </tfrom>
      <tto ikind="iulong" ttag="tint"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="39" origin="prim-exp" p-complexity="0">
     <location byte="31711" file="src/memtest.c" line="104"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="965" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="printf" id="40" name="format" origin="f-pre" p-complexity="0">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="printf" id="41" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="printf" id="42" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="printf" id="43" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="printf" id="44" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
         <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="printf" id="45" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
         <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="1" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="46" origin="prim-exp" p-complexity="0">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
       <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="47" origin="prim-exp" p-complexity="0">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="48" origin="prim-exp" p-complexity="0">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="49" origin="prim-exp" p-complexity="0">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;;*** MEMORY ADDRESSING ERROR: %p contains %lu ;&quot;">
        <constant ctag="cstr" strValue=";*** MEMORY ADDRESSING ERROR: %p contains %lu ;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="50" origin="prim-exp" p-complexity="1">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="iulong" ttag="tint"/>
      <tto ttag="tvoid"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="51" origin="prim-exp" p-complexity="0">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="965" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="52" origin="prim-exp" p-complexity="1">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="965" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="53" origin="prim-exp" p-complexity="1">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="965" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="54" origin="prim-exp" p-complexity="1">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="965" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="55" origin="prim-exp" p-complexity="6">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="965" vname="p"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="56" origin="prim-exp" p-complexity="0">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="965" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="57" origin="prim-lval" p-complexity="1">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="58" origin="prim-lval" p-complexity="1">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="59" origin="prim-lval" p-complexity="1">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iulong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="60" origin="prim-lval" p-complexity="1">
     <location byte="31753" file="src/memtest.c" line="105"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iulong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="61" origin="prim-exp" p-complexity="0">
     <location byte="31883" file="src/memtest.c" line="109"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="965" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="31"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="62" origin="prim-op" p-complexity="1">
     <location byte="31883" file="src/memtest.c" line="109"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="31"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="63" origin="prim-op" p-complexity="1">
     <location byte="31883" file="src/memtest.c" line="109"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="31"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="64" origin="prim-op" p-complexity="2">
     <location byte="31883" file="src/memtest.c" line="109"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="iulong" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="31"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="65" origin="prim-op" p-complexity="1">
     <location byte="31883" file="src/memtest.c" line="109"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="iulong" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="965" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="31"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="66" origin="prim-exp" p-complexity="0">
     <location byte="31896" file="src/memtest.c" line="110"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="964" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="32"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="67" origin="prim-exp" p-complexity="0">
     <location byte="31919" file="src/memtest.c" line="110"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="964" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="33"/>
       <node name="if-then"/>
       <node name="stmt" num="32"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="68" origin="prim-exp" p-complexity="0">
     <location byte="31919" file="src/memtest.c" line="110"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="963" vname="words"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="33"/>
       <node name="if-then"/>
       <node name="stmt" num="32"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="69" origin="prim-op" p-complexity="3">
     <location byte="31919" file="src/memtest.c" line="110"/>
     <predicate op="plusa" size="iulong" tag="int-underflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="964" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="words">
       <lval>
        <lhost>
         <var vid="963" vname="words"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="33"/>
       <node name="if-then"/>
       <node name="stmt" num="32"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="70" origin="prim-op" p-complexity="3">
     <location byte="31919" file="src/memtest.c" line="110"/>
     <predicate op="plusa" size="iulong" tag="int-overflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="964" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="words">
       <lval>
        <lhost>
         <var vid="963" vname="words"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="33"/>
       <node name="if-then"/>
       <node name="stmt" num="32"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="71" origin="prim-exp" p-complexity="0">
     <location byte="31919" file="src/memtest.c" line="110"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="963" vname="words"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="33"/>
       <node name="if-then"/>
       <node name="stmt" num="32"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="72" origin="prim-op" p-complexity="2">
     <location byte="31919" file="src/memtest.c" line="110"/>
     <predicate op="mult" size="iulong" tag="int-underflow">
      <exp1 etag="lval" xstr="words">
       <lval>
        <lhost>
         <var vid="963" vname="words"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iulong" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="33"/>
       <node name="if-then"/>
       <node name="stmt" num="32"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="73" origin="prim-op" p-complexity="2">
     <location byte="31919" file="src/memtest.c" line="110"/>
     <predicate op="mult" size="iulong" tag="int-overflow">
      <exp1 etag="lval" xstr="words">
       <lval>
        <lhost>
         <var vid="963" vname="words"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iulong" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="33"/>
       <node name="if-then"/>
       <node name="stmt" num="32"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="74" origin="prim-exp" p-complexity="0">
     <location byte="31919" file="src/memtest.c" line="110"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="A">
       <constant charValue="65" ctag="cchr"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="33"/>
       <node name="if-then"/>
       <node name="stmt" num="32"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="75" origin="prim-exp" p-complexity="0">
     <location byte="31673" file="src/memtest.c" line="103"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="964" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="34"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="76" origin="prim-op" p-complexity="2">
     <location byte="31673" file="src/memtest.c" line="103"/>
     <predicate op="plusa" size="iulong" tag="int-underflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="964" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iulong" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="34"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="77" origin="prim-op" p-complexity="2">
     <location byte="31673" file="src/memtest.c" line="103"/>
     <predicate op="plusa" size="iulong" tag="int-overflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="964" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iulong" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="34"/>
       <node name="loop"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="05/24/2016 04:22:02">
   <application file="src/memtest.xml" name="application"/>
  </header>
 </c-analysis>
